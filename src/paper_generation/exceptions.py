"""
Exception Types for Paper Generation

All exceptions follow fail-fast philosophy with actionable error messages
including remediation guidance for users.
"""


class PaperGenerationError(Exception):
    """Base exception for all paper generation errors."""
    
    def __init__(self, message: str, remediation: str | None = None):
        """
        Initialize paper generation error.
        
        Args:
            message: Description of what went wrong
            remediation: Optional guidance on how to fix the issue
        """
        self.message = message
        self.remediation = remediation
        
        full_message = message
        if remediation:
            full_message = f"{message}\n\nHow to fix:\n{remediation}"
        
        super().__init__(full_message)


class ConfigValidationError(PaperGenerationError):
    """Configuration is invalid or incomplete."""
    
    def __init__(self, message: str, field: str | None = None):
        """
        Initialize configuration validation error.
        
        Args:
            message: Description of validation failure
            field: Name of invalid field (if applicable)
        """
        self.field = field
        
        remediation = "Check your PaperConfig parameters and ensure all required fields are provided."
        if field:
            remediation = f"Check the '{field}' parameter in your PaperConfig."
        
        super().__init__(message, remediation)


class DependencyMissingError(PaperGenerationError):
    """Required external dependency (Pandoc, LaTeX) is missing."""
    
    def __init__(self, dependency: str, install_instructions: str):
        """
        Initialize dependency missing error.
        
        Args:
            dependency: Name of missing dependency (e.g., "Pandoc", "LaTeX")
            install_instructions: OS-specific installation commands
        """
        self.dependency = dependency
        
        message = f"Required dependency not found: {dependency}"
        remediation = f"Install {dependency}:\n\n{install_instructions}"
        
        super().__init__(message, remediation)


class ExperimentDataError(PaperGenerationError):
    """Experiment directory is missing required files or data."""
    
    def __init__(self, message: str, missing_path: str | None = None):
        """
        Initialize experiment data error.
        
        Args:
            message: Description of missing data
            missing_path: Path to missing file/directory (if applicable)
        """
        self.missing_path = missing_path
        
        remediation = (
            "Ensure the experiment has completed successfully and includes:\n"
            "  - analysis/statistical_report.md (generated by analysis phase)\n"
            "  - analysis/metrics.json (metric data)\n"
            "  - config/experiment.yaml (experiment configuration)"
        )
        
        if missing_path:
            remediation = f"Missing required file: {missing_path}\n\n" + remediation
        
        super().__init__(message, remediation)


class ProseGenerationError(PaperGenerationError):
    """AI-powered prose generation failed."""
    
    def __init__(self, message: str, section: str | None = None, api_error: str | None = None):
        """
        Initialize prose generation error.
        
        Args:
            message: Description of generation failure
            section: Paper section that failed (e.g., "Introduction")
            api_error: Original API error message (if applicable)
        """
        self.section = section
        self.api_error = api_error
        
        remediation = (
            "Possible causes:\n"
            "  - OpenAI API key invalid or expired (check OPENAI_API_KEY)\n"
            "  - API rate limit exceeded (wait and retry)\n"
            "  - Network connectivity issues\n"
            "  - Insufficient API credits"
        )
        
        if section:
            remediation = f"Failed while generating: {section}\n\n" + remediation
        
        if api_error:
            remediation = f"API error: {api_error}\n\n" + remediation
        
        super().__init__(message, remediation)


class FigureExportError(PaperGenerationError):
    """Figure generation or export failed."""
    
    def __init__(self, message: str, figure_name: str | None = None):
        """
        Initialize figure export error.
        
        Args:
            message: Description of export failure
            figure_name: Name of figure that failed (if applicable)
        """
        self.figure_name = figure_name
        
        remediation = (
            "Possible causes:\n"
            "  - Matplotlib not installed (pip install matplotlib)\n"
            "  - Missing experiment data for figure\n"
            "  - Insufficient disk space\n"
            "  - File permissions issue in output directory"
        )
        
        if figure_name:
            remediation = f"Failed to export: {figure_name}\n\n" + remediation
        
        super().__init__(message, remediation)


class StatisticalAnalysisError(PaperGenerationError):
    """Statistical analysis failed due to insufficient data or computational errors."""
    
    def __init__(self, message: str, metric: str | None = None):
        """
        Initialize statistical analysis error.
        
        Args:
            message: Description of statistical analysis failure
            metric: Name of metric that caused the error (if applicable)
        """
        self.metric = metric
        
        remediation = (
            "Possible causes:\n"
            "  - Insufficient sample size (need n≥2 per framework)\n"
            "  - All values identical (zero variance)\n"
            "  - All values missing for a metric\n"
            "  - Numerical computation failure in scipy/statsmodels\n"
            "\n"
            "Statistical analysis will continue for other metrics."
        )
        
        if metric:
            remediation = f"Failed for metric: {metric}\n\n" + remediation
        
        super().__init__(message, remediation)


class LatexConversionError(PaperGenerationError):
    """Pandoc Markdown→LaTeX conversion failed."""
    
    def __init__(self, message: str, pandoc_output: str | None = None):
        """
        Initialize LaTeX conversion error.
        
        Args:
            message: Description of conversion failure
            pandoc_output: Pandoc error output (if available)
        """
        self.pandoc_output = pandoc_output
        
        remediation = (
            "Possible causes:\n"
            "  - Pandoc version <2.0 (upgrade to ≥2.0)\n"
            "  - Invalid Markdown syntax\n"
            "  - Math mode errors in source\n"
            "  - Template file corruption"
        )
        
        if pandoc_output:
            remediation = f"Pandoc error:\n{pandoc_output}\n\n" + remediation
        
        super().__init__(message, remediation)


class PdfCompilationError(PaperGenerationError):
    """pdflatex PDF compilation failed."""
    
    def __init__(self, message: str, latex_log: str | None = None):
        """
        Initialize PDF compilation error.
        
        Args:
            message: Description of compilation failure
            latex_log: Excerpt from pdflatex log (if available)
        """
        self.latex_log = latex_log
        
        remediation = (
            "Possible causes:\n"
            "  - LaTeX distribution not installed (install TeX Live or MiKTeX)\n"
            "  - Missing LaTeX packages\n"
            "  - Syntax errors in LaTeX source\n"
            "  - Missing figure files referenced in document"
        )
        
        if latex_log:
            # Extract last few lines of log for context
            log_excerpt = "\n".join(latex_log.split("\n")[-20:])
            remediation = f"LaTeX log excerpt:\n{log_excerpt}\n\n" + remediation
        
        super().__init__(message, remediation)
